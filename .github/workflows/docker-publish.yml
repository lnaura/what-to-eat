# 워크플로우의 이름
name: Docker Image CI/CD for What-To-Eat

# 워크플로우가 실행될 조건: main 브랜치에 push가 발생했을 때
on:
  push:
    tags:
      - 'v*.*.*'

# 실행될 작업(Job)들 정의
jobs:
  build-and-push:
    # 작업이 실행될 환경
    runs-on: ubuntu-latest

    # 작업의 단계(Step)들
    steps:
      # 1. 레포지토리 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Docker Hub 로그인
      # 저장해 둔 Secrets를 사용하여 로그인합니다.
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Git 태그에서 버전 번호 추출
      # 예: 'v1.2.3' 태그에서 'v'를 제거하고 '1.2.3'을 VERSION 변수에 저장
      - name: Extract version from Git tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT

      # 3. 메타데이터 액션은 더 이상 필요 없으므로 삭제합니다.

      # --- 4. 백엔드 빌드 단계 수정 ---
      - name: Build and push Server Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          # 'tags:' 부분을 버전 태그와 latest 태그로 동적 설정
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/what-to-eat-server:${{ steps.get_version.outputs.VERSION }}
            ${{ secrets.DOCKERHUB_USERNAME }}/what-to-eat-server:latest
          labels: "version=${{ steps.get_version.outputs.VERSION }}"

      # --- 5. 프론트엔드 빌드 단계 수정 ---
      - name: Build and push Client Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          file: ./client/Dockerfile
          push: true
          # 'tags:' 부분을 버전 태그와 latest 태그로 동적 설정
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/what-to-eat-client:${{ steps.get_version.outputs.VERSION }}
            ${{ secrets.DOCKERHUB_USERNAME }}/what-to-eat-client:latest
          labels: "version=${{ steps.get_version.outputs.VERSION }}"
